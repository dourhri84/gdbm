from neo4j import GraphDatabase
import time

# Connection details
uri = "bolt://localhost:7687"
username = "neo4j"
password = "neo4j1234"
driver = GraphDatabase.driver(uri, auth=(username, password))

# Database names and their roles
databases = {
    "Basic": "BasicEcommerce",
    "PG-Schema": "pgGraphEcommerce",
    "ER-Schema": "erSchemaEcommerce",
    "Extended-GDBS": "extendedGDBSEcommerce",
    "GraphDesign": "graphDesignEcommerce"
}

# Access Queries Q1â€“Q5 (Cypher)
queries = {
    "Q1": """
    MATCH (c:Client)-[:MAKES]->(o:Order)
    WHERE c.login = 'client_100000'
    RETURN o
    """,

    "Q2": """
    MATCH (p:Product)<-[pvd:PROVIDES]-(s:Seller)
    WHERE s.seller_gov_id = 'gov_1000' AND pvd.warranty > 6
    RETURN p
    """,

    "Q3": """
    MATCH (c:Client)-[:MAKES]->(o:Order)
    WHERE c.type = 'company' AND o.odatetime STARTS WITH '2022-01-01'
    RETURN c.login, o.oid
    """,

    "Q4": """
    MATCH (c:Client {login:'client_100000'})-[:MAKES]->(o1:Order),
          (c)-[:MAKES]->(o2:Order)
    WHERE o2.sequenceNumber = o1.sequenceNumber + 1
    RETURN o1.oid AS CurrentOrder, o2.oid AS NextOrder
    """,

    "Q5": """
    MATCH (c:Client {login:'client_10000'})-[:MAKES]->(:Order)<-[:CONTAINS_Order]-(co:Contains)
          -[:CONTAINS_Product]->(p:Product)-[:IS_COMPOSED_OF]->(cat:Category)
    RETURN DISTINCT cat.code, cat.cname
    """
}

# Execute each query in all databases and measure times

with driver:
    for qname, cypher in queries.items():
        print(f"----- {qname} -----")
        for label, dbname in databases.items():
            with driver.session(database=dbname) as session:
                start_time = time.time()
                session.run(cypher).consume()  # Consume results to ensure full execution
                elapsed = round(time.time() - start_time, 4)
                print(f"{label:<20} : {elapsed} seconds")
        print()

print("All queries executed successfully across the five databases.")
driver.close()
