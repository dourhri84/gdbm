import random
from datetime import datetime, timedelta
from neo4j import GraphDatabase

import time as tm
s=0

# Connection details
uri = "bolt://localhost:7687"
username = "neo4j"
password = "neo4j1234"

# Database names
db_base = "ecommercebase"
#db_indexed = "ecommerceindexed"

# Connect to the Neo4j instance
driver = GraphDatabase.driver(uri, auth=(username, password))

# Helper functions
def random_date(start_date, end_date):
    delta = end_date - start_date
    random_days = random.randint(0, delta.days)
    return start_date + timedelta(days=random_days)

def generate_phone():
    return f"06{random.randint(10000000, 99999999)}"

def random_vat_rate():
    return round(random.uniform(0.05, 0.2), 2)

# Data constants
categories = [f"Category_{i}" for i in range(1, 101)]
products = [f"Product_{i}" for i in range(1, 10001)]
sellers = [f"Seller_{i}" for i in range(1, 5001)]
banks = ["Bank1", "Bank2", "Bank3", "Bank4", "Bank5"]

# Start sessions for ecommercebase databases
with driver.session(database=db_base) as session_base:
    # Node Creation
    print("Creating nodes...")

    s1=0
    # Client nodes
    for i in range(50000):
        first_name = f"Firstname_{i}"
        last_name = f"Lastname_{i}"
        phone = generate_phone()
        creation_date = random_date(datetime(2020, 1, 1), datetime(2023, 12, 31)).isoformat()
        client_type = "company" if i % 2 == 0 else "person"

        query = f"""
        CREATE (c:Client {{login: 'client_{i}', password: 'password_{i}', phone: '{phone}', creationDate: '{creation_date}',
                          firstname: '{first_name}', lastname: '{last_name}', type: '{client_type}'}})
        """
        t1=tm.time()
        session_base.run(query)
        t2=tm.time()
        s1+=(t2-t1)
    print("50000 clients inserted en",s1,"sec")

    s2=0
    # Address nodes
    for i in range(30000):
        road = f"Road_{i}"
        district = f"District_{random.randint(1, 50)}"
        town = f"Town_{random.randint(1, 100)}"
        zipcode = f"10{random.randint(100, 999)}"
        query = f"CREATE (a:Address {{addr_id: 'addr_{i}', road: '{road}', district: '{district}', town: '{town}', zipcode: {zipcode}}})"
        t1=tm.time()
        session_base.run(query)
        t2=tm.time()
        s2+=(t2-t1)
    print("30000 addresses inserted  en",s2,"sec")

    s3=0
    # Order nodes
    for i in range(200000):
        order_date = random_date(datetime(2020, 1, 1), datetime(2023, 12, 31)).isoformat()
        shipping_fee = round(random.uniform(5, 50), 2)
        total = round(random.uniform(50, 500), 2)
        sequence_number = random.randint(1, 5)
        query = f"CREATE (o:Order {{oid: {i}, odatetime: '{order_date}', shippingFee: {shipping_fee}, total: {total}, sequenceNumber: {sequence_number}}})"
        t1=tm.time()
        session_base.run(query)
        t2=tm.time()
        s3+=(t2-t1)
    print("200000 orders inserted  en",s3,"sec")

    s4=0
    # Product nodes
    for i, product in enumerate(products):
        designation = f"Designation_{i}"
        description = f"Description of {product}"
        query = f"CREATE (p:Product {{reference: 'P{i}', designation: '{designation}', description: '{description}'}})"
        t1=tm.time()
        session_base.run(query)
        t2=tm.time()
        s4+=(t2-t1)
    print("10000 products inserted  en",s4,"sec")


    s5=0
    # Category nodes
    for i, category in enumerate(categories):
        vat_rate = random_vat_rate()
        query = f"CREATE (cat:Category {{code: 'C{i}', cname: '{category}', vatRate: {vat_rate}}})"
        t1=tm.time()
        session_base.run(query)
        t2=tm.time()
        s5+=(t2-t1)
    print("100 categories inserted  en",s5,"sec")

    s6=0
    # Seller nodes
    for i, seller in enumerate(sellers):
        gov_id = f"gov_{i}"
        company_name = f"Company_{i}"
        query = f"CREATE (s:Seller {{seller_gov_id: '{gov_id}', companyName: '{company_name}'}})"
        t1=tm.time()
        session_base.run(query)
        t2=tm.time()
        s6+=(t2-t1)
    print("5000 sellers inserted  en",s6,"sec")

    s7=0
    # Payment nodes
    for i in range(170000):
        payment_date = random_date(datetime(2020, 1, 1), datetime(2023, 12, 31)).isoformat()
        query = f"CREATE (p:Payment {{pm_number: {i}, pm_datetime: '{payment_date}'}})"
        t1=tm.time()
        session_base.run(query)
        t2=tm.time()
        s7+=(t2-t1)
    print("170000 payments inserted  en",s7,"sec")

    s8=0
    # CreditCard nodes
    for i in range(20000):
        card_number = random.randint(1000000000000000, 9999999999999999)
        expire_date = f"{random.randint(1, 12)}/{random.randint(23, 30)}"
        cvc = random.randint(100, 999)
        status = random.choice([True, False])
        bank = random.choice(banks)
        interest_rate = round(random.uniform(0.01, 0.25), 2)
        limit = round(random.uniform(1000, 10000), 2)
        query = f"CREATE (c:CreditCard {{card_number: {card_number}, expireDate: '{expire_date}', cvc: {cvc}, status: {status}, bank: '{bank}', interestRate: {interest_rate}, limit: {limit}}})"
        t1=tm.time()
        session_base.run(query)
        t2=tm.time()
        s8+=(t2-t1)
    print("20000 credit cards inserted  en",s8,"sec")

    s9=0
    # DebitCard nodes
    for i in range(150000):
        card_number = random.randint(1000000000000000, 9999999999999999)
        expire_date = f"{random.randint(1, 12)}/{random.randint(23, 30)}"
        cvc = random.randint(100, 999)
        status = random.choice([True, False])
        bank = random.choice(banks)
        balance = round(random.uniform(0, 10000), 2)
        label = random.choice(["Visa", "MasterCard", "Other"])
        query = f"CREATE (d:DebitCard {{card_number: {card_number}, expireDate: '{expire_date}', cvc: {cvc}, status: {status}, bank: '{bank}', balance: {balance}, label: '{label}'}})"
        t1=tm.time()
        session_base.run(query)
        t2=tm.time()
        s9+=(t2-t1)
    print("150000 debit cards inserted  en",s9,"sec")

    s10=0
    # RemoteAccess nodes
    for i in range(200000):
        access_time = random_date(datetime(2020, 1, 1), datetime(2023, 12, 31)).isoformat()
        ip_address = f"192.168.{random.randint(0, 255)}.{random.randint(0, 255)}"
        web_browser = random.choice(["Chrome", "Firefox", "Edge", "Safari"])
        os_version = random.choice(["Windows 10", "macOS", "Ubuntu 20.04"])
        query = f"CREATE (r:RemoteAccess {{idAccess: {i}, timeAccess: '{access_time}', ip: '{ip_address}', webBrowser: '{web_browser}', OSNameVersion: '{os_version}'}})"
        t1=tm.time()
        session_base.run(query)
        t2=tm.time()
        s+=(t2-t1)
    print("200000 remote access inserted  en",s10,"sec")

    s11=0
    # Contains nodes
    for i in range(400000):
        ordered_qty = random.randint(1, 10)
        unit_price = round(random.uniform(10, 1000), 2)
        discount_rate = round(random.uniform(0.0, 0.5), 2)
        query = f"CREATE (c:Contains {{id: {i}, orderedQty: {ordered_qty}, unitPrice: {unit_price}, discountRate: {discount_rate}}})"
        t1=tm.time()
        session_base.run(query)
        t2=tm.time()
        s11+=(t2-t1)
    print("400000 contains nodes inserted  en",s11,"sec")
    print("Nodes created successfully. Creating relationships...")

    s12=0
    # Referral relationships
    for i in range(50000):
        if random.random() < 0.3:  # 30% chance of having a referrer
            referrer_id = random.randint(0, 49999)
            if referrer_id != i:
                query = f"""
                MATCH (c1:Client {{login: 'client_{i}'}}), (c2:Client {{login: 'client_{referrer_id}'}})
                CREATE (c1)-[:Referral]->(c2)
                """
                t1=tm.time()
                session_base.run(query)
                t2=tm.time()
                s12+=(t2-t1)
    print("15000 referrals RT inserted  en",s12,"sec")


    s13=0
    # Makes relationships
    for i in range(200000):
        client_id = random.randint(0, 49999)
        query = f"""
        MATCH (c:Client {{login: 'client_{client_id}'}}), (o:Order {{oid: {i}}})
        CREATE (c)-[:makes]->(o)
        """
        t1=tm.time()
        session_base.run(query)
        t2=tm.time()
        s13+=(t2-t1)
    print("200000 makes RT inserted  en",s13,"sec")

    s14=0
    # Pays relationships
    for i in range(170000):  # 170,000 orders are paid
        client_id = random.randint(0, 49999)
        query = f"""
        MATCH (c:Client {{login: 'client_{client_id}'}}), (o:Order {{oid: {i}}})
        CREATE (c)-[:pays]->(o)
        """
        t1=tm.time()
        session_base.run(query)
        t2=tm.time()
        s14+=(t2-t1)
    print("170000 pays RT inserted  en",s14,"sec")

    s15=0
    # Has relationships (Client -> Address)
    for i in range(50000):  # Every client has an address
        address_id = random.randint(0, 29999)
        query = f"""
        MATCH (c:Client {{login: 'client_{i}'}}), (a:Address {{addr_id: 'addr_{address_id}'}})
        CREATE (c)-[:has]->(a)
        """
        t1=tm.time()
        session_base.run(query)
        t2=tm.time()
        s15+=(t2-t1)
    print("50000 has RT inserted  en",s15,"sec")

    s16=0
    # Uses relationships (Payment -> RemoteAccess)
    for i in range(170000):  # Payments use remote access
        remote_access_id = random.randint(0, 199999)
        query = f"""
        MATCH (p:Payment {{pm_number: {i}}}), (r:RemoteAccess {{idAccess: {remote_access_id}}})
        CREATE (p)-[:uses]->(r)
        """
        t1=tm.time()
        session_base.run(query)

        t2=tm.time()
        s16+=(t2-t1)
    print("170000 uses RT inserted  en",s16,"sec")

    s17=0
    # Payment relationships with orders (is_composed_of2)
    for i in range(170000):  # 170,000 payments linked to orders
        order_id = random.randint(0, 199999)  # Random order ID
        payment_id = i                        # Payment ID (unique)

        query_payment_order = f"""
        MATCH (p:Payment {{pm_number: {payment_id}}}), (o:Order {{oid: {order_id}}})
        CREATE (p)-[:is_composed_of2]->(o)
        """
        t1=tm.time()
        session_base.run(query_payment_order)
        t2=tm.time()
        s17+=(t2-t1)
    print("170000 is-composed-of2 RT inserted  en",s17,"sec")

    s18=0
    # Is composed of relationships (Product -> Category)
    for i in range(10000):  # Each product belongs to a category
        category_id = random.randint(0, 99)
        query = f"""
        MATCH (p:Product {{reference: 'P{i}'}}), (cat:Category {{code: 'C{category_id}'}})
        CREATE (p)-[:is_composed_of]->(cat)
        """
        t1=tm.time()
        session_base.run(query)
        t2=tm.time()
        s18+=(t2-t1)
    print("10000 is-composed-of RT inserted  en",s18,"sec")

    s19=0
    # Provides relationships (Seller -> Product)
    for i in range(10000):  # Sellers provide products
        seller_id = random.randint(0, 4999)
        in_stock_qty = random.randint(10, 1000)
        warranty = random.randint(1, 24)
        query = f"""
        MATCH (s:Seller {{seller_gov_id: 'gov_{seller_id}'}}), (p:Product {{reference: 'P{i}'}})
        CREATE (s)-[:Provides {{inStockQty: {in_stock_qty}, warranty: {warranty}}}]->(p)
        """
        t1=tm.time()
        session_base.run(query)
        t2=tm.time()
        s+=(t2-t1)
    print("10000 Provides RT inserted  en",s19,"sec")

    s20=0
    # Concern relationships (Payment -> CreditCard/DebitCard)
    for i in range(170000):  # Payments are associated with cards
        if random.random() < 0.5:  # 50% chance to use CreditCard
            card_id = random.randint(0, 19999)
            query = f"""
            MATCH (p:Payment {{pm_number: {i}}}), (c:CreditCard {{card_number: {card_id}}})
            CREATE (p)-[:concerns]->(c)
            """
        else:  # 50% chance to use DebitCard
            card_id = random.randint(0, 149999)
            query = f"""
            MATCH (p:Payment {{pm_number: {i}}}), (d:DebitCard {{card_number: {card_id}}})
            CREATE (p)-[:concerns]->(d)
            """
        t1=tm.time()
        session_base.run(query)

        t2=tm.time()
        s20+=(t2-t1)
    print("170000 Concern RT inserted  en",s20,"sec")

    s21=0
    # Contains relationships (Order -> Contains -> Product, Seller)
    for i in range(400000):  # Each order contains products
        product_id = random.randint(0, 9999)  # Random product
        seller_id = random.randint(0, 4999)   # Random seller
        contains_id = i                      # Unique Contains ID (1:1 with iteration for simplicity)
        order_id = random.randint(0, 199999) # Random order ID

        # Create Contains_Order relationship (Order -> Contains)
        query_order_contains = f"""
        MATCH (o:Order {{oid: {order_id}}}), (c:Contains {{id: {i}}})
        CREATE (o)-[:Contains_Order]->(c)
        """
        t1=tm.time()
        session_base.run(query_order_contains)
        # Create Contains_Product relationship (Contains -> Product)
        query_contains_product = f"""
        MATCH (c:Contains {{id: {i}}}), (p:Product {{reference: 'P{product_id}'}})
        CREATE (c)-[:Contains_Product]->(p)
        """
        t1=tm.time()
        session_base.run(query_contains_product)

        # Create Contains_Seller relationship (Contains -> Seller)
        query_contains_seller = f"""
        MATCH (c:Contains {{id: {i}}}), (s:Seller {{seller_gov_id: 'gov_{seller_id}'}})
        CREATE (c)-[:Contains_Seller]->(s)
        """
        session_base.run(query_contains_seller)
        s21+=(t2-t1)q
    print("400000 success RT of Contains with Contains_Order, Contains_Product and Contains_Seller en",s21,"sec")
    print("Relationships created successfully.")
s=sum([eval("s"+str(i)) for i in range(1,22)])
print("Graph databases created successfully in a total of",s,"seconds")
driver.close()
