import random
from datetime import datetime, timedelta
from neo4j import GraphDatabase
import time as tm

uri = "bolt://localhost:7687"
username = "neo4j"
password = "neo4j1234"

driver = GraphDatabase.driver(uri, auth=(username, password))

def random_date(start_date, end_date):
    delta = end_date - start_date
    return start_date + timedelta(days=random.randint(0, delta.days))

def generate_phone():
    return f"06{random.randint(10_000_000, 99_999_999)}"

def random_vat_rate():
    return round(random.uniform(0.05, 0.2), 2)

categories = [f"Category_{i}" for i in range(1, 101)]
products = [f"Product_{i}" for i in range(1, 10001)]
sellers = [f"Seller_{i}" for i in range(1, 5001)]
banks = ["Bank1", "Bank2", "Bank3", "Bank4", "Bank5"]

dbs = ["BasicEcommerce","pgGraphEcommerce","erSchemaEcommerce","extendedGDBSEcommerce","graphDesignEcommerce"]

with driver.session(database="extendedGDBSEcommerce") as s_ext, driver.session(database="graphDesignEcommerce") as s_gd:
    s_ext.run("CREATE (:Type {type:'person'}),(:Type {type:'company'})")
    s_gd.run("CREATE (:Type {type:'person'}),(:Type {type:'company'})")
    warranties = [1,3,6,12,24,60]
    query_w = "CREATE " + ", ".join([f"(:Warranty {{warranty:{w}}})" for w in warranties])
    s_ext.run(query_w)
    s_gd.run(query_w)

with driver.session(database=dbs[0]) as s1, driver.session(database=dbs[1]) as s2, driver.session(database=dbs[2]) as s3, driver.session(database=dbs[3]) as s4, driver.session(database=dbs[4]) as s5:

    for i in range(1_000_000):
        phone = generate_phone()
        creation_date = random_date(datetime(2020,1,1), datetime(2023,12,31)).isoformat()
        client_type = "company" if i % 2 == 0 else "person"
        if client_type=="company":
            q = f"CREATE (:Client {{login:'client_{i}',password:'password_{i}',phone:'{phone}',creationDate:'{creation_date}',name:'companyName_{i}',gov_id:'govIDCompany_{i}',type:'{client_type}'}})"
            s1.run(q);s2.run(q);s3.run(q)
            q2 = f"MATCH (t:Type {{type:'{client_type}'}}) CREATE (c:Client {{login:'client_{i}',password:'password_{i}',phone:'{phone}',creationDate:'{creation_date}',name:'companyName_{i}',gov_id:'govIDCompany_{i}'}})-[:typeOfClient]->(t)"
            s4.run(q2);s5.run(q2)
        else:
            q = f"CREATE (:Client {{login:'client_{i}',password:'password_{i}',phone:'{phone}',creationDate:'{creation_date}',firstname:'Firstname_{i}',lastname:'Lastname_{i}',type:'{client_type}'}})"
            s1.run(q);s2.run(q);s3.run(q)
            q2 = f"MATCH (t:Type {{type:'{client_type}'}}) CREATE (c:Client {{login:'client_{i}',password:'password_{i}',phone:'{phone}',creationDate:'{creation_date}',firstname:'Firstname_{i}',lastname:'Lastname_{i}'}})-[:typeOfClient]->(t)"
            s4.run(q2);s5.run(q2)

    for i in range(700_000):
        q = f"CREATE (:Address {{addr_id:'addr_{i}',road:'Road_{i}',district:'District_{random.randint(1,50)}',town:'Town_{random.randint(1,100)}',zipcode:{10000+random.randint(100,999)}}})"
        s1.run(q);s2.run(q);s3.run(q);s4.run(q);s5.run(q)

    for i in range(2_000_000):
        odt = random_date(datetime(2020,1,1),datetime(2023,12,31)).isoformat()
        q = f"CREATE (:Order {{oid:{i},odatetime:'{odt}',shippingFee:{round(random.uniform(5,50),2)},total:{round(random.uniform(50,500),2)},sequenceNumber:{random.randint(1,5)}}})"
        s1.run(q);s2.run(q);s3.run(q);s4.run(q);s5.run(q)

    for i in range(1_500_000):
        pdt = random_date(datetime(2020,1,1),datetime(2023,12,31)).isoformat()
        q = f"CREATE (:Payment {{pm_number:{i},pm_datetime:'{pdt}'}})"
        s1.run(q);s2.run(q);s3.run(q);s4.run(q);s5.run(q)

    for i in range(3_000_000):
        at = random_date(datetime(2020,1,1),datetime(2023,12,31)).isoformat()
        q = f"CREATE (:RemoteAccess {{idAccess:{i},timeAccess:'{at}',ip:'192.168.{random.randint(0,255)}.{random.randint(0,255)}',webBrowser:'{random.choice(['Chrome','Firefox','Edge','Safari'])}',OSNameVersion:'{random.choice(['Windows 10','macOS','Ubuntu 20.04'])}'}})"
        s1.run(q);s2.run(q);s3.run(q);s4.run(q);s5.run(q)

    for i in range(400_000):
        q = f"CREATE (:CreditCard {{card_number:{random.randint(10**15,10**16-1)},expireDate:'{random.randint(1,12)}/{random.randint(23,30)}',cvc:{random.randint(100,999)},status:{random.choice([True,False])},bank:'{random.choice(banks)}',interestRate:{round(random.uniform(0.01,0.25),2)},limit:{round(random.uniform(1000,10000),2)}}})"
        s1.run(q);s2.run(q);s3.run(q);s4.run(q);s5.run(q)

    for i in range(200_000):
        q = f"CREATE (:DebitCard {{card_number:{random.randint(10**15,10**16-1)},expireDate:'{random.randint(1,12)}/{random.randint(23,30)}',cvc:{random.randint(100,999)},status:{random.choice([True,False])},bank:'{random.choice(banks)}',balance:{round(random.uniform(0,10000),2)},label:'{random.choice(['Visa','MasterCard','Other'])}'}})"
        s1.run(q);s2.run(q);s3.run(q);s4.run(q);s5.run(q)

    for i, product in enumerate(products):
        q = f"CREATE (:Product {{reference:'P{i}',designation:'Designation_{i}',description:'Description of {product}'}})"
        s1.run(q);s2.run(q);s3.run(q);s4.run(q);s5.run(q)

    for i, category in enumerate(categories):
        q = f"CREATE (:Category {{code:'C{i}',cname:'{category}',vatRate:{random_vat_rate()}}})"
        s1.run(q);s2.run(q);s3.run(q);s4.run(q);s5.run(q)

    for i, seller in enumerate(sellers):
        q = f"CREATE (:Seller {{seller_gov_id:'gov_{i}',companyName:'Company_{i}'}})"
        s1.run(q);s2.run(q);s3.run(q);s4.run(q);s5.run(q)

    for i in range(100_000):
        q = f"CREATE (:Contains {{id:{i},orderedQty:{random.randint(1,10)},unitPrice:{round(random.uniform(10,1000),2)},discountRate:{round(random.uniform(0.0,0.5),2)}}})"
        s1.run(q);s2.run(q);s3.run(q);s4.run(q);s5.run(q)


#add constraints and indexes in the second, third and fifth databases
constraints_pg = [
    "CREATE CONSTRAINT client_login IF NOT EXISTS FOR (c:Client) REQUIRE c.login IS UNIQUE",
    "CREATE CONSTRAINT address_addr_id IF NOT EXISTS FOR (a:Address) REQUIRE a.addr_id IS UNIQUE",
    "CREATE CONSTRAINT order_oid IF NOT EXISTS FOR (o:Order) REQUIRE o.oid IS UNIQUE",
    "CREATE CONSTRAINT payment_pm_number IF NOT EXISTS FOR (p:Payment) REQUIRE p.pm_number IS UNIQUE",
    "CREATE CONSTRAINT remoteaccess_idAccess IF NOT EXISTS FOR (r:RemoteAccess) REQUIRE r.idAccess IS UNIQUE",
    "CREATE CONSTRAINT creditcard_card_number IF NOT EXISTS FOR (cc:CreditCard) REQUIRE cc.card_number IS UNIQUE",
    "CREATE CONSTRAINT debitcard_card_number IF NOT EXISTS FOR (dc:DebitCard) REQUIRE dc.card_number IS UNIQUE",
    "CREATE CONSTRAINT product_reference IF NOT EXISTS FOR (p:Product) REQUIRE p.reference IS UNIQUE",
    "CREATE CONSTRAINT category_code IF NOT EXISTS FOR (cat:Category) REQUIRE cat.code IS UNIQUE",
    "CREATE CONSTRAINT seller_seller_gov_id IF NOT EXISTS FOR (s:Seller) REQUIRE s.seller_gov_id IS UNIQUE",
    "CREATE CONSTRAINT contains_id IF NOT EXISTS FOR (c:Contains) REQUIRE c.id IS UNIQUE"
]

with driver.session(database=dbs[1]) as session_pg:
    for c in constraints_pg:
        session_pg.run(c)

indexes_er = [
    "CREATE INDEX client_login IF NOT EXISTS FOR (c:Client) ON (c.login)",
    "CREATE INDEX client_type IF NOT EXISTS FOR (c:Client) ON (c.type)",
    "CREATE INDEX seller_seller_gov_id IF NOT EXISTS FOR (s:Seller) ON (s.seller_gov_id)",
    "CREATE INDEX order_oid_sequenceNumber IF NOT EXISTS FOR (o:Order) ON (o.oid, o.sequenceNumber)",
    "CREATE INDEX category_code IF NOT EXISTS FOR (cat:Category) ON (cat.code)",
    "CREATE INDEX provides_warranty IF NOT EXISTS FOR ()-[r:PROVIDES]-() ON (r.warranty)",
    "CREATE INDEX payment_date IF NOT EXISTS FOR (p:Payment) ON (p.pm_datetime)",
    "CREATE INDEX address_town IF NOT EXISTS FOR (a:Address) ON (a.town)"
]

with driver.session(database=dbs[2]) as session_er:
    for idx in indexes_er:
        session_er.run(idx)

with driver.session(database=dbs[4]) as session_gd:
    for c in constraints_pg:
        session_gd.run(c)
    for idx in indexes_er:
        session_gd.run(idx)

# === RELATIONSHIP POPULATION FOR THE FIVE DATABASES ========
# ==========================================================

with driver.session(database=dbs[0]) as s1, \
     driver.session(database=dbs[1]) as s2, \
     driver.session(database=dbs[2]) as s3, \
     driver.session(database=dbs[3]) as s4, \
     driver.session(database=dbs[4]) as s5:

    # Referral between part of clients
    for i in range(200_000):
        c1 = random.randint(0, 999_999)
        c2 = random.randint(0, 999_999)
        if c1 != c2:
            q = f"""
            MATCH (a:Client {{login:'client_{c1}'}}), (b:Client {{login:'client_{c2}'}})
            CREATE (a)-[:REFERRAL]->(b)
            """
            s1.run(q); s2.run(q); s3.run(q); s4.run(q); s5.run(q)

    # makes and pays between Client and Order
    for i in range(1_700_000):
        cid = random.randint(0, 999_999)
        oid = random.randint(0, 1_999_999)
        q_m = f"""
        MATCH (c:Client {{login:'client_{cid}'}}), (o:Order {{oid:{oid}}})
        CREATE (c)-[:MAKES]->(o)
        """
        q_p = f"""
        MATCH (c:Client {{login:'client_{cid}'}}), (o:Order {{oid:{oid}}})
        CREATE (c)-[:PAYS]->(o)
        """
        s1.run(q_m); s2.run(q_m); s3.run(q_m); s4.run(q_m); s5.run(q_m)
        s1.run(q_p); s2.run(q_p); s3.run(q_p); s4.run(q_p); s5.run(q_p)

        # participates only in query-driven DBs
        q_part = f"""
        MATCH (c:Client {{login:'client_{cid}'}}), (o:Order {{oid:{oid}}})
        CREATE (c)-[:PARTICIPATES]->(o)
        """
        s4.run(q_part); s5.run(q_part)

    # next between successive orders of the same client
    for cid in range(1_000_000):
        q_next = f"""
        MATCH (c:Client {{login:'client_{cid}'}})-[:MAKES]->(o:Order)
        WITH o ORDER BY o.sequenceNumber
        WITH collect(o) AS ords
        UNWIND range(0, size(ords)-2) AS i
        WITH ords[i] AS current, ords[i+1] AS nxt
        CREATE (current)-[:NEXT]->(nxt)
        """
        s1.run(q_next); s2.run(q_next); s3.run(q_next); s4.run(q_next); s5.run(q_next)

    # has between Client and Address
    for i in range(1_000_000):
        aid = random.randint(0, 699_999)
        q = f"""
        MATCH (c:Client {{login:'client_{i}'}}), (a:Address {{addr_id:'addr_{aid}'}})
        CREATE (c)-[:HAS]->(a)
        """
        s1.run(q); s2.run(q); s3.run(q); s4.run(q); s5.run(q)

    # containsOrder / containsProduct / containsSeller
    for i in range(100_000):
        oid = random.randint(0, 1_999_999)
        pid = random.randint(0, 9_999)
        sid = random.randint(0, 4_999)
        q1 = f"""
        MATCH (o:Order {{oid:{oid}}}), (co:Contains {{id:{i}}})
        CREATE (o)-[:CONTAINS_Order]->(co)
        """
        q2 = f"""
        MATCH (co:Contains {{id:{i}}}), (p:Product {{reference:'P{pid}'}})
        CREATE (co)-[:CONTAINS_Product]->(p)
        """
        q3 = f"""
        MATCH (co:Contains {{id:{i}}}), (s:Seller {{seller_gov_id:'gov_{sid}'}})
        CREATE (co)-[:CONTAINS_Seller]->(s)
        """
        s1.run(q1); s2.run(q1); s3.run(q1); s4.run(q1); s5.run(q1)
        s1.run(q2); s2.run(q2); s3.run(q2); s4.run(q2); s5.run(q2)
        s1.run(q3); s2.run(q3); s3.run(q3); s4.run(q3); s5.run(q3)

    # is-composed (Product → Category)
    for i in range(10_000):
        cid = random.randint(0, 99)
        q = f"""
        MATCH (p:Product {{reference:'P{i}'}}), (cat:Category {{code:'C{cid}'}})
        CREATE (p)-[:IS_COMPOSED_OF]->(cat)
        """
        s1.run(q); s2.run(q); s3.run(q); s4.run(q); s5.run(q)

    # provides (Seller → Product)
    for i in range(10_000):
        sid = random.randint(0, 4_999)
        in_stock = random.randint(10, 1000)
        warranty = random.choice([1,3,6,12,24,60])
        q_prov = f"""
        MATCH (s:Seller {{seller_gov_id:'gov_{sid}'}}), (p:Product {{reference:'P{i}'}})
        CREATE (s)-[:PROVIDES {{inStockQty:{in_stock}, warranty:{warranty}}}]->(p)
        """
        s1.run(q_prov); s2.run(q_prov); s3.run(q_prov)

        # for query-driven DBs replace warranty by linking to Warranty nodes
        q_warr = f"""
        MATCH (s:Seller {{seller_gov_id:'gov_{sid}'}}),
              (p:Product {{reference:'P{i}'}}),
              (w:Warranty {{warranty:{warranty}}})
        CREATE (s)-[:sellerWarranty]->(w),
               (w)-[:productWarranty]->(p)
        """
        s4.run(q_warr); s5.run(q_warr)

    # is-composed-2 (Payment → Order)
    for i in range(1_500_000):
        oid = random.randint(0, 1_999_999)
        q = f"""
        MATCH (p:Payment {{pm_number:{i}}}), (o:Order {{oid:{oid}}})
        CREATE (p)-[:IS_COMPOSED_OF2]->(o)
        """
        s1.run(q); s2.run(q); s3.run(q); s4.run(q); s5.run(q)

    # uses (Payment → RemoteAccess)
    for i in range(1_000_000):
        rid = random.randint(0, 2_999_999)
        q = f"""
        MATCH (p:Payment {{pm_number:{i}}}), (r:RemoteAccess {{idAccess:{rid}}})
        CREATE (p)-[:USES]->(r)
        """
        s1.run(q); s2.run(q); s3.run(q); s4.run(q); s5.run(q)

    # concern1 / concern2 (Payment → DebitCard or CreditCard)
    for i in range(1_000_000):
        if random.random() < 0.5:
            did = random.randint(0, 199_999)
            q = f"""
            MATCH (p:Payment {{pm_number:{i}}}), (d:DebitCard)
            WHERE d.card_number IS NOT NULL AND rand() < 0.0005
            CREATE (p)-[:CONCERN1]->(d)
            """
        else:
            cid = random.randint(0, 399_999)
            q = f"""
            MATCH (p:Payment {{pm_number:{i}}}), (c:CreditCard)
            WHERE c.card_number IS NOT NULL AND rand() < 0.0005
            CREATE (p)-[:CONCERN2]->(c)
            """
        s1.run(q); s2.run(q); s3.run(q); s4.run(q); s5.run(q)

driver.close()
