import random
from datetime import datetime, timedelta
from neo4j import GraphDatabase
import time as tm

# Connection details
uri = "bolt://localhost:7687"
username = "neo4j"
password = "neo4j1234"

# Database name
db_base = "ecommerceQueryDriven"

# Connect to the Neo4j instance
driver = GraphDatabase.driver(uri, auth=(username, password))

# Helper functions
def random_date(start_date, end_date):
    delta = end_date - start_date
    random_days = random.randint(0, delta.days)
    return start_date + timedelta(days=random_days)

def generate_phone():
    return f"06{random.randint(10000000, 99999999)}"

def random_vat_rate():
    return round(random.uniform(0.05, 0.2), 2)

# Data constants
categories = [f"Category_{i}" for i in range(1, 101)]
products = [f"Product_{i}" for i in range(1, 10001)]

# Start session for the ecommerce database
with driver.session(database=db_base) as session_base:
    print("Creating nodes and relationships...")

    # Clients and their types
    for i in range(50000):
        first_name = f"Firstname_{i}"
        last_name = f"Lastname_{i}"
        phone = generate_phone()
        creation_date = random_date(datetime(2020, 1, 1), datetime(2023, 12, 31)).isoformat()
        client_type = "company" if i % 2 == 0 else "person"
        query_client = f"""
        CREATE (c:Client {{login: 'client_{i}', password: 'password_{i}', phone: '{phone}', creationDate: '{creation_date}',
                          firstname: '{first_name}', lastname: '{last_name}'}})
        """
        query_type = f"CREATE (t:Type {{type: '{client_type}'}})"
        query_client_type = f"""
        MATCH (c:Client {{login: 'client_{i}'}}), (t:Type {{type: '{client_type}'}})
        MERGE (c)-[:typeOfClient]->(t)
        """
        session_base.run(query_client)
        session_base.run(query_type)
        session_base.run(query_client_type)

    # Orders
    for i in range(200000):
        order_date = random_date(datetime(2020, 1, 1), datetime(2023, 12, 31)).isoformat()
        shipping_fee = round(random.uniform(5, 50), 2)
        total = round(random.uniform(50, 500), 2)
        sequence_number = random.randint(1, 10)
        query_order = f"CREATE (o:Order {{oid: {i}, odatetime: '{order_date}', shippingFee: {shipping_fee}, total: {total}, sequenceNumber: {sequence_number}}})"
        session_base.run(query_order)

    # Products
    for i, product in enumerate(products):
        designation = f"Designation_{i}"
        description = f"Description of {product}"
        query_product = f"CREATE (p:Product {{reference: 'P{i}', designation: '{designation}', description: '{description}'}})"
        session_base.run(query_product)

    # Categories
    for i, category in enumerate(categories):
        vat_rate = random_vat_rate()
        query_category = f"CREATE (cat:Category {{code: 'C{i}', cname: '{category}', vatRate: {vat_rate}}})"
        session_base.run(query_category)

    # Contains nodes
    for i in range(400000):
        ordered_qty = random.randint(1, 10)
        unit_price = round(random.uniform(10, 1000), 2)
        discount_rate = round(random.uniform(0.0, 0.5), 2)
        query_contains = f"CREATE (c:Contains {{id: {i}, orderedQty: {ordered_qty}, unitPrice: {unit_price}, discountRate: {discount_rate}}})"
        session_base.run(query_contains)

    print("Nodes created successfully. Creating relationships...")

    # Referral relationships
    for i in range(50000):
        if random.random() < 0.3:  # 30% chance of having a referrer
            referrer_id = random.randint(0, 49999)
            if referrer_id != i:
                query_referral = f"""
                MATCH (c1:Client {{login: 'client_{i}'}}), (c2:Client {{login: 'client_{referrer_id}'}})
                CREATE (c1)-[:Referral]->(c2)
                """
                session_base.run(query_referral)

    # Makes and pays relationships
    for i in range(200000):
        client_id = random.randint(0, 49999)
        query_makes = f"""
        MATCH (c:Client {{login: 'client_{client_id}'}}), (o:Order {{oid: {i}}})
        CREATE (c)-[:makes]->(o)
        """
        session_base.run(query_makes)

        if random.random() < 0.85:  # 85% chance of being paid
            query_pays = f"""
            MATCH (c:Client {{login: 'client_{client_id}'}}), (o:Order {{oid: {i}}})
            CREATE (c)-[:pays]->(o)
            """
            session_base.run(query_pays)

        # Participates relationship
        query_participates = f"""
        MATCH (c:Client {{login: 'client_{client_id}'}}), (o:Order {{oid: {i}}})
        MERGE (c)-[:participates]->(o)
        """
        session_base.run(query_participates)

    # Is composed of relationships (Product -> Category)
    for i in range(10000):
        category_id = random.randint(0, 99)
        query_is_composed_of = f"""
        MATCH (p:Product {{reference: 'P{i}'}}), (cat:Category {{code: 'C{category_id}'}})
        CREATE (p)-[:is_composed_of]->(cat)
        """
        session_base.run(query_is_composed_of)

    # Contains relationships (Order -> Contains -> Product)
    for i in range(400000):
        product_id = random.randint(0, 9999)
        order_id = random.randint(0, 199999)

        query_order_contains = f"""
        MATCH (o:Order {{oid: {order_id}}}), (c:Contains {{id: {i}}})
        CREATE (o)-[:Contains_Order]->(c)
        """
        session_base.run(query_order_contains)

        query_contains_product = f"""
        MATCH (c:Contains {{id: {i}}}), (p:Product {{reference: 'P{product_id}'}})
        CREATE (c)-[:Contains_Product]->(p)
        """
        session_base.run(query_contains_product)

    # Next relationships
    for client_id in range(50000):
        query_next = f"""
        MATCH (c:Client {{login: 'client_{client_id}'}})-[:makes]->(o:Order)
        WITH o ORDER BY o.sequenceNumber
        WITH collect(o) AS orders
        UNWIND range(0, size(orders) - 2) AS idx
        WITH orders[idx] AS current, orders[idx + 1] AS next
        MERGE (current)-[:next]->(next)
        """
        session_base.run(query_next)

    # Purchases relationships
    query_purchases = f"""
    MATCH (c:Client)-[:makes]->(o:Order)-[:Contains_Order]->(co:Contains)-[:Contains_Product]->(p:Product)-[:is_composed_of]->(cat:Category)
    MERGE (c)-[:purchases]->(cat)
    """
    session_base.run(query_purchases)

print("Graph databases created successfully.")
driver.close()
